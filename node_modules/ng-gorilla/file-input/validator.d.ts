import { OnChanges, SimpleChanges } from '@angular/core';
import { AbstractControl, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class FileValidator {
    static maxContentSize(bytes: number): ValidatorFn;
}
export declare class MaxContentSizeValidator implements Validator, OnChanges {
    private _validator;
    private _onChange;
    /**
     * A flag that tracks whether this validator is enabled.
     *
     * Marking it `internal` (vs `protected`), so that this flag can be used in host bindings of
     * directive classes that extend this base class.
     * @internal
     */
    _enabled?: boolean;
    ngOnChanges(changes: SimpleChanges): void;
    validate(control: AbstractControl): ValidationErrors | null;
    registerOnValidatorChange(fn: () => void): void;
    /**
     * @description
     * Determines whether this validator should be active or not based on an input.
     * Base class implementation checks whether an input is defined (if the value is different from
     * `null` and `undefined`). Validator classes that extend this base class can override this
     * function with the logic specific to a particular validator directive.
     */
    enabled(input: unknown): boolean;
    /**
     * @description
     * Tracks changes to the maximum content size bound to this directive.
     */
    maxContentSize: string | number | null;
    inputName: string;
    normalizeInput: (input: string | number) => number;
    createValidator: (maxContentSize: number) => ValidatorFn;
    static ɵfac: i0.ɵɵFactoryDeclaration<MaxContentSizeValidator, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MaxContentSizeValidator, "[maxContentSize][formControlName],[maxContentSize][formControl],[maxContentSize][ngModel]", never, { "maxContentSize": { "alias": "maxContentSize"; "required": false; }; }, {}, never, never, true, never>;
}
