import { Directive, Input, forwardRef } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import * as i0 from "@angular/core";
export class FileValidator {
    static maxContentSize(bytes) {
        return maxContentSizeValidator(bytes);
    }
}
const MAX_CONTENT_SIZE_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => MaxContentSizeValidator),
    multi: true
};
export class MaxContentSizeValidator {
    constructor() {
        this._validator = nullValidator;
        this.inputName = 'maxContentSize';
        this.normalizeInput = (input) => toInteger(input);
        this.createValidator = (maxContentSize) => maxContentSizeValidator(maxContentSize);
    }
    ngOnChanges(changes) {
        if (this.inputName in changes) {
            const input = this.normalizeInput(changes[this.inputName].currentValue);
            this._enabled = this.enabled(input);
            this._validator = this._enabled ? this.createValidator(input) : nullValidator;
            if (this._onChange) {
                this._onChange();
            }
        }
    }
    validate(control) {
        return this._validator(control);
    }
    registerOnValidatorChange(fn) {
        this._onChange = fn;
    }
    /**
     * @description
     * Determines whether this validator should be active or not based on an input.
     * Base class implementation checks whether an input is defined (if the value is different from
     * `null` and `undefined`). Validator classes that extend this base class can override this
     * function with the logic specific to a particular validator directive.
     */
    enabled(input) {
        return input != null /* both `null` and `undefined` */;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: MaxContentSizeValidator, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.0.8", type: MaxContentSizeValidator, isStandalone: true, selector: "[maxContentSize][formControlName],[maxContentSize][formControl],[maxContentSize][ngModel]", inputs: { maxContentSize: "maxContentSize" }, host: { properties: { "attr.maxContentSize": "_enabled ? maxContentSize : null" } }, providers: [MAX_CONTENT_SIZE_VALIDATOR], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: MaxContentSizeValidator, decorators: [{
            type: Directive,
            args: [{
                    selector: '[maxContentSize][formControlName],[maxContentSize][formControl],[maxContentSize][ngModel]',
                    providers: [MAX_CONTENT_SIZE_VALIDATOR],
                    host: { '[attr.maxContentSize]': '_enabled ? maxContentSize : null' },
                    standalone: true
                }]
        }], propDecorators: { maxContentSize: [{
                type: Input
            }] } });
/**
 * Method that updates string to integer if not already a number
 *
 * @param value The value to convert to integer.
 * @returns value of parameter converted to number or integer.
 */
function toInteger(value) {
    return typeof value === 'number' ? value : parseInt(value, 10);
}
/**
* Validator that requires the content size of the control's value to be greater than
* to the provided maximum content size. See `FileValidator.maxContentSize` for additional information.
*/
function maxContentSizeValidator(bytes) {
    return (control) => {
        const size = control && control.value ? control.value.map(f => f.file.size).reduce((acc, i) => acc + i, 0) : 0;
        const condition = bytes > size;
        return condition ? null : { maxContentSize: { actualSize: size, maxSize: bytes } };
    };
}
/**
 * Function that has `ValidatorFn` shape, but performs no operation.
 */
function nullValidator(control) {
    return null;
}
//# sourceMappingURL=data:application/json;base64,