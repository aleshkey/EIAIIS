import { BooleanInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, DoCheck, ElementRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { AbstractControl, ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { CanDisable, ErrorStateMatcher, HasTabIndex } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./file-input-button";
import * as i2 from "./validator";
import * as i3 from "./byte-format.pipe";
export declare class FileInput {
    file: File;
    name: string;
    constructor(file: File);
}
/** @docs-private */
declare const MixinErrorStateBase: import("@angular/material/core")._Constructor<HasTabIndex> & import("@angular/material/core")._AbstractConstructor<HasTabIndex> & import("@angular/material/core")._Constructor<CanDisable> & import("@angular/material/core")._AbstractConstructor<CanDisable> & import("@angular/material/core")._Constructor<import("@angular/material/core").CanUpdateErrorState> & import("@angular/material/core")._AbstractConstructor<import("@angular/material/core").CanUpdateErrorState> & {
    new (_elementRef: ElementRef, _defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl): {
        /**
         * Emits whenever the component state changes and should cause the parent
         * form-field to update. Implemented as part of `MatFormFieldControl`.
         * @docs-private
         */
        readonly stateChanges: Subject<void>;
        _elementRef: ElementRef;
        _defaultErrorStateMatcher: ErrorStateMatcher;
        _parentForm: NgForm;
        _parentFormGroup: FormGroupDirective;
        /**
         * Form control bound to the component.
         * Implemented as part of `MatFormFieldControl`.
         * @docs-private
         */
        ngControl: NgControl;
    };
};
export declare class GrlFileInput extends MixinErrorStateBase implements MatFormFieldControl<any>, ControlValueAccessor, OnDestroy, CanDisable, HasTabIndex, OnChanges, DoCheck {
    private _changeDetectorRef;
    input: ElementRef<HTMLInputElement>;
    multiple: true | null;
    accept: string[];
    maxContentSize: number;
    value: FileInput[];
    errorStateMatcher: ErrorStateMatcher;
    remove(file: FileInput): void;
    onUpload(event: Event): void;
    open(): void;
    clear(): void;
    ngOnChanges(changes: SimpleChanges): void;
    _previousControl: AbstractControl | null | undefined;
    ngDoCheck(): void;
    get id(): string;
    set id(value: string);
    private _id;
    placeholder: string;
    private _focused;
    get focused(): boolean;
    set focused(v: boolean);
    get empty(): boolean;
    get shouldLabelFloat(): boolean;
    get required(): boolean;
    set required(value: BooleanInput);
    private _required;
    controlType: string;
    private _autofilled;
    get autofilled(): boolean;
    set autofilled(v: boolean);
    userAriaDescribedBy: string;
    _ariaDescribedby: string | null;
    setDescribedByIds(ids: string[]): void;
    onContainerClick(event: MouseEvent): void;
    _focus(): void;
    _blur(): void;
    private _role;
    get role(): string | null;
    set role(value: string | null);
    protected _defaultRole: string;
    constructor(_elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, defaultErrorStateMatcher: ErrorStateMatcher, parentForm: NgForm, parentFormGroup: FormGroupDirective, ngControl: NgControl);
    /**
     * Function when touched. Set as part of ControlValueAccessor implementation.
     * @docs-private
    */
    _onTouched: () => void;
    /**
     * Function when changed. Set as part of ControlValueAccessor implementation.
     * @docs-private
    */
    _onChange: (value: FileInput[]) => void;
    /**
     * Implemented as part of ControlValueAccessor.
     * @docs-private
    */
    writeValue(value: FileInput[]): void;
    /**
     * Implemented as part of ControlValueAccessor.
     * @docs-private
    */
    registerOnChange(fn: (value: FileInput[]) => void): void;
    /**
     * Implemented as part of ControlValueAccessor.
     * @docs-private
    */
    registerOnTouched(fn: () => void): void;
    /**
     * Implemented as part of ControlValueAccessor.
     * @docs-private
    */
    setDisabledState(isDisabled: boolean): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<GrlFileInput, [null, null, null, { optional: true; }, { optional: true; }, { optional: true; self: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GrlFileInput, "grl-file-input", never, { "disabled": { "alias": "disabled"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "accept": { "alias": "accept"; "required": false; }; "maxContentSize": { "alias": "maxContentSize"; "required": false; }; "value": { "alias": "value"; "required": false; }; "errorStateMatcher": { "alias": "errorStateMatcher"; "required": false; }; "id": { "alias": "id"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "userAriaDescribedBy": { "alias": "aria-describedby"; "required": false; }; "role": { "alias": "role"; "required": false; }; }, {}, never, never, true, never>;
    static ngAcceptInputType_maxContentSize: unknown;
}
export declare class GrlFileInputModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<GrlFileInputModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<GrlFileInputModule, never, [typeof GrlFileInput, typeof i1.GrlFileInputButton, typeof i2.MaxContentSizeValidator, typeof i3.ByteFormatPipe], [typeof GrlFileInput, typeof i1.GrlFileInputButton, typeof i2.MaxContentSizeValidator, typeof i3.ByteFormatPipe]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<GrlFileInputModule>;
}
export {};
