import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, HostBinding, Input, NgModule, Optional, Self, ViewChild, ViewEncapsulation, numberAttribute } from '@angular/core';
import { Validators } from '@angular/forms';
import { MatChipsModule } from '@angular/material/chips';
import { mixinDisabled, mixinErrorState, mixinTabIndex } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { Subject } from 'rxjs';
import { ByteFormatPipe } from './byte-format.pipe';
import { GrlFileInputButton } from './file-input-button';
import { MaxContentSizeValidator } from './validator';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/core";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/common";
import * as i4 from "@angular/material/chips";
import * as i5 from "@angular/material/icon";
export class FileInput {
    constructor(file) {
        this.file = file;
        this.name = file.name;
    }
}
let nextUniqueId = 0;
// Boilerplate for applying mixins to GrlFileInput.
/** @docs-private */
const MixinErrorStateBase = mixinTabIndex(mixinDisabled(mixinErrorState(class {
    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, 
    /**
     * Form control bound to the component.
     * Implemented as part of `MatFormFieldControl`.
     * @docs-private
     */
    ngControl) {
        this._elementRef = _elementRef;
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
        /**
         * Emits whenever the component state changes and should cause the parent
         * form-field to update. Implemented as part of `MatFormFieldControl`.
         * @docs-private
         */
        this.stateChanges = new Subject();
    }
})));
export class GrlFileInput extends MixinErrorStateBase {
    remove(file) {
        if (!this.disabled) {
            const index = this.value.indexOf(file);
            if (index >= 0) {
                this.value.splice(index, 1);
                this.input.nativeElement.value = '';
                this._onChange(this.value);
                this.stateChanges.next();
            }
        }
    }
    onUpload(event) {
        const fileList = event.target.files;
        if (!this.disabled && fileList) {
            this.value = [];
            for (let i = 0; i < fileList.length; i++) {
                if (typeof fileList[i].name != 'undefined' && (!this.maxContentSize || fileList[i].size < this.maxContentSize) && (this.accept.includes('image/*') || this.accept.includes(fileList[i].type) && !(this.value.map(x => x.name).includes(fileList[i].name)))) {
                    this.value.push(new FileInput(fileList[i]));
                }
            }
            this._onChange(this.value);
            this.stateChanges.next();
        }
    }
    open() {
        this.input.nativeElement.click();
    }
    clear() {
        this.value = [];
        this.input.nativeElement.value = '';
        this._onChange(this.value);
        this.stateChanges.next();
    }
    ngOnChanges(changes) {
        if (changes['disabled'] || changes['userAriaDescribedBy']) {
            this.stateChanges.next();
        }
    }
    ngDoCheck() {
        const ngControl = this.ngControl;
        if (ngControl) {
            if (this._previousControl !== ngControl.control) {
                if (this._previousControl !== undefined && ngControl.disabled !== null && ngControl.disabled !== this.disabled) {
                    this.disabled = ngControl.disabled;
                }
                this._previousControl = ngControl.control;
            }
            this.updateErrorState();
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
        this.stateChanges.next();
    }
    get focused() {
        return this._focused;
    }
    set focused(v) {
        this._focused = v;
        this.stateChanges.next();
    }
    get empty() {
        return this.value.length ? false : true;
    }
    get shouldLabelFloat() {
        return this.focused || !this.empty;
    }
    get required() {
        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    get autofilled() {
        return this._autofilled;
    }
    set autofilled(v) {
        this._autofilled = v;
        this.stateChanges.next();
    }
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.length ? ids.join(' ') : null;
    }
    onContainerClick(event) {
        if (!this.disabled) {
            this._elementRef.nativeElement.focus();
        }
    }
    _focus() {
        if (!this.disabled) {
            this.focused = true;
        }
    }
    _blur() {
        this.focused = false;
        this._onTouched();
    }
    get role() {
        if (this._role) {
            return this._role;
        }
        return this.empty ? null : this._defaultRole;
    }
    set role(value) {
        this._role = value;
    }
    constructor(_elementRef, _changeDetectorRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        super(_elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
        this._changeDetectorRef = _changeDetectorRef;
        this.multiple = null;
        this.accept = ['image/*'];
        this.value = [];
        this._id = `inline-uploader-${nextUniqueId++}`;
        this._focused = false;
        this.controlType = 'mat-select';
        this._autofilled = false;
        this._ariaDescribedby = null;
        this._role = null;
        this._defaultRole = 'presentation';
        /**
         * Function when touched. Set as part of ControlValueAccessor implementation.
         * @docs-private
        */
        this._onTouched = () => { };
        /**
         * Function when changed. Set as part of ControlValueAccessor implementation.
         * @docs-private
        */
        this._onChange = () => { };
        if (this.ngControl != null) {
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * Implemented as part of ControlValueAccessor.
     * @docs-private
    */
    writeValue(value) {
        if (value) {
            this.value = value;
            this._changeDetectorRef.markForCheck();
            this.stateChanges.next();
        }
    }
    /**
     * Implemented as part of ControlValueAccessor.
     * @docs-private
    */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * Implemented as part of ControlValueAccessor.
     * @docs-private
    */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * Implemented as part of ControlValueAccessor.
     * @docs-private
    */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this._changeDetectorRef.markForCheck();
        this.stateChanges.next();
    }
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: GrlFileInput, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.ErrorStateMatcher }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i2.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.0.8", type: GrlFileInput, isStandalone: true, selector: "grl-file-input", inputs: { disabled: "disabled", tabIndex: "tabIndex", multiple: "multiple", accept: "accept", maxContentSize: ["maxContentSize", "maxContentSize", numberAttribute], value: "value", errorStateMatcher: "errorStateMatcher", id: "id", placeholder: "placeholder", userAriaDescribedBy: ["aria-describedby", "userAriaDescribedBy"], role: "role" }, host: { listeners: { "focus": "_focus()", "blur": "_blur()" }, properties: { "class.inline-upliader-disabled": "disabled", "class.inline-upliader-invalid": "errorState", "class.inline-upliader-required": "required", "class.inline-upliader-empty": "empty", "class.inline-upliader-multiple": "multiple", "attr.role": "role", "attr.aria-disabled": "disabled.toString()", "attr.aria-required": "required.toString()", "attr.aria-invalid": "errorState", "attr.tabindex": "tabIndex", "attr.id": "id", "attr.aria-describedby": "this._ariaDescribedby" } }, providers: [
            { provide: MatFormFieldControl, useExisting: GrlFileInput }
        ], viewQueries: [{ propertyName: "input", first: true, predicate: ["fileInput"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `
    <mat-chip-set>
      <mat-chip *ngFor="let file of value" (removed)="remove(file)">
          {{file.name}}
          <button matChipRemove>
              <mat-icon>cancel</mat-icon>
          </button>
      </mat-chip>
    </mat-chip-set>
    <div class="mat-mdc-file-input-value">
        <span class="mat-mdc-file-input-placeholder mat-mdc-file-input-min-line" *ngIf="empty">{{placeholder}}</span>
    </div>
    <input type="file" #fileInput [attr.multiple]="multiple" [attr.accept]="accept" (change)="onUpload($event)" />
  `, isInline: true, styles: ["grl-file-input{--grl-file-input-placeholder-text-color: rgba(0, 0, 0, .6);display:block;min-height:40px;outline:none;-webkit-user-select:none;user-select:none}grl-file-input input[type=file]{position:absolute;inset:0;z-index:-10;width:0;height:0;opacity:0;display:none}.mat-mdc-file-input-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-file-input-min-line:empty:before{content:\" \";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-mdc-file-input-placeholder{transition:color .4s .1333333333333s cubic-bezier(.25,.8,.25,1);color:var(--grl-file-input-placeholder-text-color)}._mat-animation-noopable .mat-mdc-file-input-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-file-input-placeholder{color:#0000;-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: MatChipsModule }, { kind: "component", type: i4.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["color", "disabled", "disableRipple", "tabIndex", "role", "id", "aria-label", "aria-description", "value", "removable", "highlighted"], outputs: ["removed", "destroyed"], exportAs: ["matChip"] }, { kind: "directive", type: i4.MatChipRemove, selector: "[matChipRemove]" }, { kind: "component", type: i4.MatChipSet, selector: "mat-chip-set", inputs: ["disabled", "role"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: GrlFileInput, decorators: [{
            type: Component,
            args: [{ selector: 'grl-file-input', template: `
    <mat-chip-set>
      <mat-chip *ngFor="let file of value" (removed)="remove(file)">
          {{file.name}}
          <button matChipRemove>
              <mat-icon>cancel</mat-icon>
          </button>
      </mat-chip>
    </mat-chip-set>
    <div class="mat-mdc-file-input-value">
        <span class="mat-mdc-file-input-placeholder mat-mdc-file-input-min-line" *ngIf="empty">{{placeholder}}</span>
    </div>
    <input type="file" #fileInput [attr.multiple]="multiple" [attr.accept]="accept" (change)="onUpload($event)" />
  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [
                        CommonModule,
                        MatChipsModule,
                        MatIconModule,
                    ], providers: [
                        { provide: MatFormFieldControl, useExisting: GrlFileInput }
                    ], inputs: ['disabled', 'tabIndex'], host: {
                        '[class.inline-upliader-disabled]': 'disabled',
                        '[class.inline-upliader-invalid]': 'errorState',
                        '[class.inline-upliader-required]': 'required',
                        '[class.inline-upliader-empty]': 'empty',
                        '[class.inline-upliader-multiple]': 'multiple',
                        '[attr.role]': 'role',
                        '(focus)': '_focus()',
                        '(blur)': '_blur()',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '[attr.aria-required]': 'required.toString()',
                        '[attr.aria-invalid]': 'errorState',
                        '[attr.tabindex]': 'tabIndex',
                        '[attr.id]': 'id'
                    }, styles: ["grl-file-input{--grl-file-input-placeholder-text-color: rgba(0, 0, 0, .6);display:block;min-height:40px;outline:none;-webkit-user-select:none;user-select:none}grl-file-input input[type=file]{position:absolute;inset:0;z-index:-10;width:0;height:0;opacity:0;display:none}.mat-mdc-file-input-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-file-input-min-line:empty:before{content:\" \";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-mdc-file-input-placeholder{transition:color .4s .1333333333333s cubic-bezier(.25,.8,.25,1);color:var(--grl-file-input-placeholder-text-color)}._mat-animation-noopable .mat-mdc-file-input-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-file-input-placeholder{color:#0000;-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.ErrorStateMatcher }, { type: i2.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i2.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: i2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }], propDecorators: { input: [{
                type: ViewChild,
                args: ['fileInput']
            }], multiple: [{
                type: Input
            }], accept: [{
                type: Input
            }], maxContentSize: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], value: [{
                type: Input
            }], errorStateMatcher: [{
                type: Input
            }], id: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], userAriaDescribedBy: [{
                type: Input,
                args: ['aria-describedby']
            }], _ariaDescribedby: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], role: [{
                type: Input
            }] } });
export class GrlFileInputModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: GrlFileInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.0.8", ngImport: i0, type: GrlFileInputModule, imports: [GrlFileInput, GrlFileInputButton, MaxContentSizeValidator, ByteFormatPipe], exports: [GrlFileInput, GrlFileInputButton, MaxContentSizeValidator, ByteFormatPipe] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: GrlFileInputModule, imports: [GrlFileInput] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: GrlFileInputModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [GrlFileInput, GrlFileInputButton, MaxContentSizeValidator, ByteFormatPipe],
                    exports: [GrlFileInput, GrlFileInputButton, MaxContentSizeValidator, ByteFormatPipe],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,